# 서버 관련 설정
server:
  http_listen_port: 9080   # Promtail HTTP 서버가 수신할 포트 설정
  grpc_listen_port: 0      # gRPC 서버 포트를 사용하지 않도록 설정 (0은 비활성화)

# 로그 위치 정보 기록을 위한 설정
positions:
  filename: /tmp/positions.yaml   # 마지막으로 처리된 로그 위치를 저장할 파일 경로

# Loki 서버에 로그를 전송하는 클라이언트 설정
clients:
  - url: http://loki:3100/loki/api/v1/push  # Loki 서버의 URL (로그를 전송할 주소)
    batchwait: 1s           # 로그를 전송하기 전에 대기하는 시간 (기본값: 1s)
    batchsize: 1048576      # 한 번에 전송하는 최대 바이트 수 (기본값: 1MB, 즉 1,048,576 bytes)

# 로그 수집 설정
#scrape_configs:
#  - job_name: livekit  # 수집 작업의 이름 (docker-logs로 명명됨)
#    static_configs:
#      - targets:
#          - localhost   # 수집 대상이 되는 호스트 (여기서는 localhost)
#        labels:
#          job: livekit-logs  # 'docker-logs'라는 레이블을 지정하여 수집 작업을 구분
#          container_name: livekit  # 'container'라는 레이블을 지정하여 컨테이너 이름을 저장
#          __path__: /var/lib/docker/containers/*/*.log  # docker 컨테이너의 로그 파일 경로
#    pipeline_stages:
#      # Docker JSON 로그에서 log 필드 추출
#      - json:
#          expressions:
#            log: log  # 로그 메시지 필드에서 'log'라는 키를 추출
#      - output:
#            source: log  # 추출한 'log' 필드를 출력
#      # livekit 컨테이너만 필터링
#      - match:
#        selector: '{container_name="livekit"}'
#        stages:
#          - json:
#              expressions:
#                log: log
#          - output:
#              source: log
#      - drop:
#            expression: '.*(healthcheck|ping).*'  # 'healthcheck' 또는 'ping'이 포함된 로그 라인을 필터링하여 제거

scrape_configs:
  - job_name: docker-logs
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 10s

    relabel_configs:
      - source_labels: [__meta_docker_container_name]
        regex: '/(.*)'
        target_label: container_name

    pipeline_stages:
      - match:
          selector: '{container_name="livekit"}'
          stages:
            - json:
                expressions:
                  log: log
            - output:
                source: log
      - drop:
          expression: '.*(healthcheck|ping).*'

