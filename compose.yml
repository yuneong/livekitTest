services:
  livekit:
    image: livekit/livekit-server:latest
    container_name: livekit
    command: --config /etc/livekit/config.yml
    volumes:
      - ./livekit-config.yml:/etc/livekit/config.yml
    ports:
      - "7880:7880"           # API / Signal
      - "7881:7881"           # WebRTC TCP
      - "7882:7882/udp"       # WebRTC UDP
      - "7999:7999"           # livekit 자체 metrics
      - "9000:9000"           # metrics-proxy가 노출하는 포트
    restart: unless-stopped

  # metrics proxy (루프백으로만 열리는 7999 -> 외부 접근 가능한 9000으로 프록시)
  metrics-proxy:
    image: alpine/socat
    container_name: metrics-proxy
    network_mode: "service:livekit"   # livekit과 네트워크 공유
    depends_on:
      - livekit
    command: tcp-listen:9000,fork,reuseaddr,bind=0.0.0.0 tcp:127.0.0.1:7999

  prometheus:
    image: prom/prometheus:latest
#    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - metrics-proxy
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
#    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: unless-stopped

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    command: -config.file=/etc/promtail/promtail.yml
    volumes:
      - ./promtail.yml:/etc/promtail/promtail.yml  # Promtail 설정 파일
      - /var/lib/docker/containers:/var/lib/docker/containers:ro  # Docker 컨테이너 로그에 대한 읽기 전용 액세스
      - /var/run/docker.sock:/var/run/docker.sock  # Docker 소켓에 대한 액세스 (컨테이너 메타데이터 수집용)
    depends_on:
      - loki
    restart: unless-stopped

  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    command: -config.file=/etc/loki/loki.yml
    volumes:
        - ./loki.yml:/etc/loki/loki.yml
    ports:
        - "3100:3100"
    restart: unless-stopped